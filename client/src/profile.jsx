import { useState, useEffect } from "react";
import Navbar from "./navbar";
import Footer from "./footer";
import { Link } from "react-router-dom";
import { getAuth, onAuthStateChanged } from "firebase/auth";
import {
  doc,
  getDoc,
  collection,
  getDocs,
  updateDoc,
} from "firebase/firestore";
import { db } from "./firebase/firebase";
import articles from "./article.json"; // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON

const Profile = () => {
  const [user, setUser] = useState(null);
  const [profileData, setProfileData] = useState(null);
  const [quizResults, setQuizResults] = useState([]);
  const [loading, setLoading] = useState(true);
  const [isEditing, setIsEditing] = useState(false);
  const [editedName, setEditedName] = useState("");
  const [editedEmail, setEditedEmail] = useState("");

  useEffect(() => {
    const auth = getAuth();
    const storedUser = localStorage.getItem("user");
    if (storedUser) {
      setUser(JSON.parse(storedUser));
    }

    const unsubscribe = onAuthStateChanged(auth, async (currentUser) => {
      if (currentUser) {
        console.log("‚úÖ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà:", currentUser);
        setUser(currentUser);
        localStorage.setItem("user", JSON.stringify(currentUser));

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        const userRef = doc(db, "users", currentUser.uid);
        const docSnap = await getDoc(userRef);
        if (docSnap.exists()) {
          const data = docSnap.data();
          setProfileData(data);
          localStorage.setItem("profileData", JSON.stringify(data));
        }

        // ‡∏î‡∏∂‡∏á‡∏ú‡∏•‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        const quizCollectionRef = collection(
          db,
          "users",
          currentUser.uid,
          "quiz"
        );
        const quizSnapshot = await getDocs(quizCollectionRef);
        const quizResultsList = quizSnapshot.docs.map((doc) => ({
          id: doc.id,
          ...doc.data(),
        }));
        setQuizResults(quizResultsList);
      } else {
        console.log("üî¥ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô");
        setUser(null);
        localStorage.removeItem("user");
        localStorage.removeItem("profileData");
      }
      setLoading(false);
    });

    return () => unsubscribe();
  }, []);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î popup ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
  const openEditPopup = () => {
    console.log("Edit button clicked");
    if (profileData) {
      setEditedName(profileData.name || "");
      setEditedEmail(profileData.email || "");
    }
    setIsEditing(true);
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå (‡πÉ‡∏ä‡πâ updateDoc)
  const handleSaveProfile = async () => {
    if (!user) return;
    try {
      const userRef = doc(db, "users", user.uid);
      await updateDoc(userRef, { name: editedName, email: editedEmail });
      const updatedProfile = {
        ...profileData,
        name: editedName,
        email: editedEmail,
      };
      setProfileData(updatedProfile);
      localStorage.setItem("profileData", JSON.stringify(updatedProfile));
      setIsEditing(false);
    } catch (error) {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå:", error);
    }
  };

  if (loading) {
    return (
      <div className="text-center mt-8 text-brown text-lg">
        ‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...
      </div>
    );
  }

  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• achievements ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô {} ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô error
  const achievements =
    profileData && profileData.achievements ? profileData.achievements : {};

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö (quiz)
  const totalQuizScore = quizResults.reduce((acc, quiz) => acc + quiz.score, 0);
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô achievement ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î)
  const totalAchievementScore =
    (achievements.content ? Object.keys(achievements.content).length : 0) +
    (achievements.simulator ? Object.keys(achievements.simulator).length : 0) +
    (achievements.knowledge ? Object.keys(achievements.knowledge).length : 0);
  // ‡∏£‡∏ß‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const overallScore = totalQuizScore + totalAchievementScore;

  return (
    <div className="flex flex-col min-h-screen bg-beige-light">
      <Navbar />
      <main className="flex-grow container mx-auto px-2 py-4">
        <h1 className="text-center text-3xl sm:text-4xl font-bold text-dark-brown mb-6">
          ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô
        </h1>

        {/* Profile Section */}
        <section className="max-w-3xl mx-auto bg-white/90 backdrop-blur-md shadow-lg rounded-lg p-6 mb-8">
          {user ? (
            <div>
              <div className="flex flex-col sm:flex-row items-center justify-between">
                <div className="flex items-center space-x-4">
                  <img
                    src={profileData?.profilePic || "/profile_default.jpg"}
                    alt="Profile"
                    className="w-20 h-20 rounded-full border-2 border-brown shadow-lg"
                  />
                  <div>
                    <h2 className="text-2xl font-bold text-dark-brown">
                      {profileData?.name}
                    </h2>
                    <p className="text-lg text-dark-brown">
                      {profileData?.email}
                    </p>
                    {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°‡πÑ‡∏ß‡πâ‡πÉ‡∏ï‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏• */}
                  </div>
                </div>
                <button
                  onClick={openEditPopup}
                  className="mt-4 sm:mt-0 px-4 py-2 bg-light-brown text-beige rounded-full shadow hover:bg-brown transition duration-300 text-sm sm:text-base"
                >
                  ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                </button>
              </div>
              <div className="mt-4 p-3 bg-brown rounded-lg shadow-xl">
                <p className="text-xl font-extrabold text-beige text-center">
                  ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°: {overallScore}
                </p>
              </div>
            </div>
          ) : (
            <p className="text-center text-dark-brown">
              ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            </p>
          )}
        </section>

        {/* Popup Edit Profile */}
        {isEditing && (
          <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
            <div className="bg-white rounded-lg p-6 w-80 sm:w-96 shadow-lg">
              <h2 className="text-xl font-bold text-dark-brown mb-4 text-center">
                ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
              </h2>
              <div className="mb-4">
                <label className="block text-dark-brown mb-1">‡∏ä‡∏∑‡πà‡∏≠:</label>
                <input
                  type="text"
                  value={editedName}
                  onChange={(e) => setEditedName(e.target.value)}
                  className="w-full p-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-brown"
                />
              </div>
              <div className="mb-4">
                <label className="block text-dark-brown mb-1">‡∏≠‡∏µ‡πÄ‡∏°‡∏•:</label>
                <input
                  type="email"
                  value={editedEmail}
                  onChange={(e) => setEditedEmail(e.target.value)}
                  className="w-full p-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-brown"
                />
              </div>
              <div className="flex justify-end">
                <button
                  onClick={handleSaveProfile}
                  className="px-4 py-2 bg-brown text-beige rounded-full shadow hover:bg-light-brown transition duration-300 mr-2"
                >
                  ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                </button>
                <button
                  onClick={() => setIsEditing(false)}
                  className="px-4 py-2 bg-gray-300 text-dark-brown rounded-full shadow hover:bg-gray-400 transition duration-300"
                >
                  ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Quiz Results Section */}
        <section className="max-w-3xl mx-auto bg-white/90 backdrop-blur-md shadow-lg rounded-lg p-6 mb-3">
          <h2 className="text-2xl font-semibold text-dark-brown mb-4">
            ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
          </h2>
          {quizResults.length > 0 ? (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {quizResults.map((quiz) => (
                <div
                  key={quiz.id}
                  className="p-4 border border-brown rounded-lg shadow hover:shadow-md transition duration-300"
                >
                  <p className="text-xl font-bold text-dark-brown">
                    ‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {quiz.title}
                  </p>
                  <p className="text-lg text-dark-brown">
                    ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {quiz.score} ‡∏à‡∏≤‡∏Å {quiz.max}
                  </p>
                  <p className="text-lg text-dark-brown">
                    ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå: {((quiz.score / quiz.max) * 100).toFixed(2)}%
                  </p>
                </div>
              ))}
            </div>
          ) : (
            <p className="text-center text-dark-brown">
              ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
            </p>
          )}
        </section>

        {/* Achievements Section */}
        <section className="max-w-3xl mx-auto bg-white/90 backdrop-blur-md shadow-lg rounded-lg p-6 mb-8">
          <h2 className="text-2xl font-semibold text-dark-brown mb-4">
            ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
          </h2>
          <div className="space-y-6">
            {["content", "simulator", "knowledge"].map((category) => {
              let title, total, completed, percentage;
              if (category === "content") {
                title = "‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°";
                total = 5; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡πá‡∏°‡∏Ñ‡∏∑‡∏≠ 5
                completed = achievements.content
                  ? Math.min(Object.keys(achievements.content).length, 5)
                  : 0;
                percentage = (completed / total) * 100;
              } else if (category === "simulator") {
                title = "‡∏ã‡∏¥‡∏°‡∏°‡∏π‡πÄ‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå";
                total = 1; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏Ñ‡∏∑‡∏≠ 1
                completed =
                  achievements.simulator &&
                  Object.keys(achievements.simulator).length > 0
                    ? 1
                    : 0;
                percentage = (completed / total) * 100;
              } else if (category === "knowledge") {
                title = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ";
                total = articles.length; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå article.json
                completed = achievements.knowledge
                  ? Object.keys(achievements.knowledge).length
                  : 0;
                percentage = total > 0 ? (completed / total) * 100 : 0;
              }
              return (
                <div
                  key={category}
                  className="p-4 bg-light-brown2 rounded-lg shadow-md"
                >
                  <h3 className="text-xl font-bold text-dark-brown mb-3 capitalize">
                    {title}
                  </h3>
                  <p className="text-sm text-dark-brown mb-2">
                    {category === "knowledge"
                      ? `‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${completed} / ${total}`
                      : category === "content"
                      ? `‡∏ó‡∏≥‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${completed} / ${total}`
                      : `‡∏ó‡∏≥‡∏ã‡∏¥‡∏°‡∏°‡∏π‡πÄ‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${completed} / ${total}`}
                  </p>
                  <div className="w-full bg-gray-300 rounded-full h-4">
                    <div
                      className="bg-brown h-4 rounded-full"
                      style={{ width: `${percentage}%` }}
                    ></div>
                  </div>
                  <p className="text-sm text-dark-brown mt-1">
                    {percentage.toFixed(2)}%
                  </p>

                  {/* Render ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ achievement */}
                  {achievements[category] &&
                  Object.keys(achievements[category]).length > 0 ? (
                    category === "content" ? (
                      <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 mt-4">
                        {Object.keys(achievements[category]).map((key) => {
                          // mapping ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö key ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå
                          const mapping = {
                            history_coffee: {
                              label: "‡∏õ‡∏£‡∏∞‡∏ß‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡πÅ‡∏ü",
                              icon: "nav/icons8-history-80.png",
                              link: "/history",
                            },
                            gene_coffee: {
                              label: "‡∏™‡∏≤‡∏¢‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏Å‡∏≤‡πÅ‡∏ü",
                              icon: "nav/icons8-coffee-beans-48 (2).png",
                              link: "/geneCoffee",
                            },
                            roasting_coffee: {
                              label: "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡πà‡∏ß‡∏Å‡∏≤‡πÅ‡∏ü",
                              icon: "nav/icons8-coffee-bag-50.png",
                              link: "/roasting",
                            },
                            extraction_coffee: {
                              label: "‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Å‡∏≤‡∏£‡∏™‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡πÅ‡∏ü",
                              icon: "nav/icons8-vietnamese-coffee-50.png",
                              link: "/extraction",
                            },
                            process_coffee: {
                              label: "‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏Å‡∏≤‡πÅ‡∏ü",
                              icon: "nav/icons8-coffee-cup-50.png",
                              link: "/process",
                            },
                          }[key];
                          if (mapping) {
                            return (
                              <div
                                key={key}
                                className="p-3 bg-white/65 rounded-lg shadow hover:shadow-md transition transform"
                              >
                                <Link
                                  to={mapping.link}
                                  className="flex items-center"
                                >
                                  <img
                                    src={mapping.icon}
                                    alt={`${mapping.label} icon`}
                                    className="w-6 h-6 mr-2"
                                  />
                                  <h4 className="text-md font-bold text-dark-brown">
                                    {mapping.label}
                                  </h4>
                                </Link>
                              </div>
                            );
                          } else {
                            // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà key ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö mapping ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ
                            return (
                              <div
                                key={key}
                                className="p-3 bg-white/65 rounded-lg shadow hover:shadow-md transition transform"
                              >
                                <h4 className="text-lg font-bold text-dark-brown">
                                  {key}
                                </h4>
                              </div>
                            );
                          }
                        })}
                      </div>
                    ) : (
                      <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 mt-4">
                        {Object.keys(achievements[category]).map((key) => (
                          <div
                            key={key}
                            className="p-3 bg-white/65 rounded-lg shadow hover:shadow-md transition transform"
                          >
                            <h4 className="text-lg font-bold text-dark-brown">
                              {key}
                            </h4>
                          </div>
                        ))}
                      </div>
                    )
                  ) : (
                    <p className="text-sm text-dark-brown mt-4">
                      ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏ô‡∏µ‡πâ
                    </p>
                  )}
                </div>
              );
            })}
          </div>
        </section>
      </main>
      <Footer />
    </div>
  );
};

export default Profile;
